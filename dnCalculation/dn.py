#################
#### IMPORTS ####
#################

from tqdm import tqdm
import prody
import numpy as np
import dnModule as dn
import sys

###################
#### VARIABLES ####
###################

treatment = sys.argv[1]
#treatment = "MD1"
rep = sys.argv[2]
chain = sys.argv[3]
eqs = [f"eq{sys.argv[4]}"]
#eqs = ["eq9"]
#eqs = ["eq5", "eq6", "eq7", "eq8", "eq9"]
#chain = "A" ##Modificar Acá. Opciones: "A", "B", "C", "D". Usando cualquier otra, el programa no va a funcionar
zmin = -25 #antes -17.75
zmax = 25  #antes 12.25
radius = 5
radius2 = radius**2
ltube = abs(zmin) + abs(zmax)
binsnumber =  25
binSize = ltube/binsnumber
print(f"bin size: {binSize}")

###################
#### ARCHIVOS  ####
###################

inputDCD = f"/home/acaviglia/EspacioExtra/nespinoza/AQPs-JAG/FaPIPs/FaPIP2.1.two.template/MDs/replica{rep}/{treatment}/{eqs[0]}.dcd"
dcd_path = f"/home/acaviglia/EspacioExtra/nespinoza/AQPs-JAG/FaPIPs/FaPIP2.1.two.template/MDs/replica{rep}/{treatment}/"

if len(eqs) == 1:
    outputName = f"dn_r{rep}{treatment}{chain}{eqs[0]}"
else:
    outputName = f"dn_r{rep}{treatment}{chain}"


############ Especificación de variables según la cadena #######
#Modificar sólo si se quiere reorganizar los path de los pdb de referencia o si se corre desde otro usuario del servidor

if chain == "A":
    refsel = "index 455 456 457 458 461 462 967 968 969 970 971 972 973 974 975 976 977 979 980 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1095 1097 1098 1100 1101 1102 1103 1104 1156 1203 1205 1206 1207 1209 1210 1212 1213 1214 1216 1217 1225 1226 1227 1228 1229 1230 1236 1246 1248 1249 1254 1255 1256 1257 1259 1260 1261 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1359 1360 2054 2055 2056 2057 2058 2356 2358 2359 2361 2362 2363 2364 2365 2423 2424 2425 2426 2427 2428 2775 2776 2777 2778 2779 2782 2783 2784 2785 2829 2830 2831 2832 2833 2834 2836 2901 2902 2903 2904 2905 2906 2907 2908 2965 3025 3026 3027 3029 3031 3035 3036 3037 3038 3039 3040 3041 3043 3045 3046 3047 3058 3059 3060 3061 3062 3063 3066 3071 3072 3073 3074 3076 3077 3078 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3124 3125 3126"
    refPDB = "/home/acaviglia/pfs/RefFrames/A.ref.pdb"
elif chain == "B":
    refsel = "index 4352 4353 4354 4355 4356 4358 4359 4864 4866 4867 4868 4869 4870 4871 4872 4873 4874 4876 4877 4915 4917 4918 4920 4921 4922 4923 4924 4925 4926 4927 4994 4995 4997 4998 4999 5000 5001 5053 5102 5103 5104 5105 5106 5107 5108 5109 5110 5111 5112 5113 5114 5115 5116 5117 5118 5119 5120 5122 5123 5124 5125 5126 5127 5128 5129 5130 5132 5133 5136 5140 5143 5145 5146 5147 5148 5149 5150 5151 5152 5153 5154 5156 5157 5158 5189 5190 5191 5192 5193 5194 5195 5196 5197 5198 5255 5256 5257 5951 5952 5953 5954 5955 6256 6259 6260 6261 6262 6321 6322 6323 6324 6673 6679 6680 6681 6682 6727 6728 6729 6730 6731 6798 6800 6801 6802 6803 6804 6862 6922 6923 6924 6926 6932 6933 6934 6935 6936 6937 6938 6940 6942 6943 6944 6955 6956 6957 6959 6963 6968 6969 6970 6971 6973 6974 6975 7006 7007 7008 7009 7010 7011 7012 7013 7014 7015 7016 7017 7018 7019 7020 7021 7022 7023"
    refPDB = "/home/acaviglia/pfs/RefFrames/B.ref.pdb"
elif chain == "C":
    refsel ="index 8249 8250 8251 8252 8255 8256 8761 8763 8764 8765 8766 8767 8768 8769 8770 8771 8773 8812 8814 8815 8816 8817 8818 8819 8820 8821 8822 8823 8824 8889 8891 8892 8894 8895 8896 8897 8898 8950 8999 9000 9001 9003 9004 9006 9007 9008 9009 9010 9011 9012 9016 9019 9020 9021 9022 9023 9024 9025 9030 9040 9042 9043 9048 9049 9050 9051 9053 9054 9055 9086 9087 9088 9089 9090 9091 9092 9093 9094 9095 9153 9848 9849 9850 9851 9852 10150 10151 10152 10153 10155 10156 10157 10158 10159 10218 10219 10220 10221 10222 10569 10570 10571 10572 10576 10577 10578 10579 10623 10624 10625 10626 10627 10628 10695 10696 10697 10698 10699 10700 10701 10759 10819 10820 10821 10822 10823 10825 10829 10830 10831 10832 10833 10834 10835 10837 10839 10840 10841 10852 10853 10854 10855 10856 10857 10859 10860 10865 10866 10867 10868 10870 10871 10872 10903 10904 10905 10906 10907 10908 10909 10910 10911 10912 10913 10914 10915 10917 10918 10919 10920"
    refPDB = "/home/acaviglia/pfs/RefFrames/C.ref.pdb"
elif chain == "D":
    refsel = "index 12146 12147 12148 12149 12152 12153 12658 12660 12661 12662 12663 12664 12665 12666 12667 12668 12670 12671 12709 12711 12712 12713 12714 12715 12716 12717 12718 12719 12720 12721 12786 12788 12789 12791 12792 12793 12794 12795 12847 12896 12897 12898 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 12911 12913 12916 12917 12918 12919 12920 12921 12922 12927 12937 12939 12940 12945 12946 12947 12948 12950 12951 12952 12983 12984 12985 12986 12987 12988 12989 12990 12991 12992 13050 13051 13745 13746 13747 13748 13749 14047 14048 14049 14050 14052 14053 14054 14055 14056 14115 14116 14117 14118 14119 14466 14467 14468 14469 14473 14474 14475 14476 14520 14521 14522 14523 14524 14525 14527 14592 14593 14594 14595 14596 14597 14598 14599 14655 14656 14716 14717 14718 14719 14720 14721 14722 14723 14724 14725 14726 14727 14728 14729 14730 14731 14732 14734 14736 14737 14738 14749 14750 14751 14752 14753 14754 14756 14757 14762 14763 14764 14765 14767 14768 14769 14801 14802 14803 14805 14806 14807 14808 14809 14810 14811 14815 14816 14817"
    refPDB = "/home/acaviglia/pfs/RefFrames/D.ref.pdb"
#######################################################################

print("zmax: ", zmax)
print("zmin: ", zmin)
print("radio: ", radius)
print("largo del cilindro: ", ltube)
print("cantidad de bins: ", binsnumber)
print("tamaño de bins: ", binSize)

if len(eqs) == 1:
    ensemble = prody.DCDFile(inputDCD)
else:
    ensemble = prody.parseDCD(inputDCD)
    for dcd in eqs[1:]:
        ensemble.addFile(f"{dcd_path}{dcd}.dcd") #Chequear que esto funcione!

structure = prody.parsePDB(refPDB) #Cargamos la información de coordenadas del pdb.

ensemble.setAtoms(structure.select(refsel)) #Alineamos respecto al pdb de referencia usando la selección especificada.
ensemble.setCoords(structure) #Establecemos el pdb como frame de referencia
ensemble.link(structure)

datos = dn.getBinsData(ensemble, structure, zmin, zmax, radius, binSize)
dn = dn.dnMatrixCalculation(datos, binsnumber)
np.save(outputName, dn)
